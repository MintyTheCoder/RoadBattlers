//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input Actions/GamePadControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamePadControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamePadControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamePadControl"",
    ""maps"": [
        {
            ""name"": ""Gamepad Controller"",
            ""id"": ""aa328d4f-4c30-47cd-9d00-a63278905dbd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1639c334-2738-4c7c-b11c-0c3efff80476"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""77caff32-02fa-4e51-95ac-fba14ea5ee64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""e09fa913-f17b-47f6-90c7-79af0a9b4eb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""9019d02f-91e2-41ca-88f4-17b9eb914799"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""b9bc436f-a6d7-4ca7-a477-f48c7a996522"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special Attack"",
                    ""type"": ""Button"",
                    ""id"": ""95c34f19-9639-4715-bbaa-f7a054dbf33a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d60d7ac4-e291-4cfe-9d8e-36908741b382"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3aff5898-fbb9-4ee6-bfd2-506ada8dfa89"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36706427-2a73-4206-b51c-d5cbc7afed04"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66ac331b-75e9-4b13-9c60-564b37d42044"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa0f4b31-d00f-43f8-8619-49a5210805a7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a65a8b20-2bf6-4e81-932d-de9f6325be68"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ef8e4d7-7932-405e-b380-217706a2595d"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gamepad Controller
        m_GamepadController = asset.FindActionMap("Gamepad Controller", throwIfNotFound: true);
        m_GamepadController_Move = m_GamepadController.FindAction("Move", throwIfNotFound: true);
        m_GamepadController_Jump = m_GamepadController.FindAction("Jump", throwIfNotFound: true);
        m_GamepadController_Throw = m_GamepadController.FindAction("Throw", throwIfNotFound: true);
        m_GamepadController_Pause = m_GamepadController.FindAction("Pause", throwIfNotFound: true);
        m_GamepadController_Punch = m_GamepadController.FindAction("Punch", throwIfNotFound: true);
        m_GamepadController_SpecialAttack = m_GamepadController.FindAction("Special Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gamepad Controller
    private readonly InputActionMap m_GamepadController;
    private IGamepadControllerActions m_GamepadControllerActionsCallbackInterface;
    private readonly InputAction m_GamepadController_Move;
    private readonly InputAction m_GamepadController_Jump;
    private readonly InputAction m_GamepadController_Throw;
    private readonly InputAction m_GamepadController_Pause;
    private readonly InputAction m_GamepadController_Punch;
    private readonly InputAction m_GamepadController_SpecialAttack;
    public struct GamepadControllerActions
    {
        private @GamePadControl m_Wrapper;
        public GamepadControllerActions(@GamePadControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamepadController_Move;
        public InputAction @Jump => m_Wrapper.m_GamepadController_Jump;
        public InputAction @Throw => m_Wrapper.m_GamepadController_Throw;
        public InputAction @Pause => m_Wrapper.m_GamepadController_Pause;
        public InputAction @Punch => m_Wrapper.m_GamepadController_Punch;
        public InputAction @SpecialAttack => m_Wrapper.m_GamepadController_SpecialAttack;
        public InputActionMap Get() { return m_Wrapper.m_GamepadController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamepadControllerActions set) { return set.Get(); }
        public void SetCallbacks(IGamepadControllerActions instance)
        {
            if (m_Wrapper.m_GamepadControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnJump;
                @Throw.started -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnThrow;
                @Pause.started -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnPause;
                @Punch.started -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnPunch;
                @Punch.performed -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnPunch;
                @Punch.canceled -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnPunch;
                @SpecialAttack.started -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.performed -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.canceled -= m_Wrapper.m_GamepadControllerActionsCallbackInterface.OnSpecialAttack;
            }
            m_Wrapper.m_GamepadControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Punch.started += instance.OnPunch;
                @Punch.performed += instance.OnPunch;
                @Punch.canceled += instance.OnPunch;
                @SpecialAttack.started += instance.OnSpecialAttack;
                @SpecialAttack.performed += instance.OnSpecialAttack;
                @SpecialAttack.canceled += instance.OnSpecialAttack;
            }
        }
    }
    public GamepadControllerActions @GamepadController => new GamepadControllerActions(this);
    public interface IGamepadControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
    }
}
